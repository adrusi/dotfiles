source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" "noload"

set-option global termcmd "alacritty -e sh -c"

declare-user-mode fzf
declare-user-mode fzf-vcs
plug andreyorst/fzf.kak %{
    set-option global fzf_preview false
    declare-option -hidden str real_termcmd %opt{termcmd}
    declare-option str fzf_method f
    define-command -hidden launch-fzf %{
        fzf-mode
        execute-keys %opt{fzf_method}
        # This actually blocks (why?) but placing it here makes it work
        nop %sh{ float-next-alacritty-window & }
    }
    # map global user p ': launch-fzf<ret>' #: fzf-mode<ret>'
    map global normal <c-p> ': launch-fzf<ret>'
}

plug eraserhd/parinfer-rust do %{
    cargo build --release
} %{
    hook -group parinfer global WinSetOption filetype=(lisp|scheme) %{
        parinfer -paren
        hook -group parinfer window NormalIdle '' %{
            parinfer -smart
        }
        hook -group parinfer window InsertChar .* %{
            parinfer -smart
        }
        hook -group parinfer window InsertDelete .* %{
            parinfer -smart
        }
    }
}

plug Delapouite/kakoune-palette

plug adrusi/flint.kak %{
    set-option global flint_error_face magenta
    set-option global flint_warning_face cyan
}

plug adrusi/terra.kak

# plug "andreyorst/powerline.kak" %{
#     hook global WinCreate .* %{
#         powerline-separator triangle
#     }
# }

plug adrusi/zig.kak

hook global WinSetOption filetype=(typescript|go|rust) %{
    evaluate-commands %sh{ kak-lsp --kakoune -s $kak_session }
    lsp-auto-hover-enable
    set-option global lsp_hover_anchor true
}

colorscheme adrusi
add-highlighter global/linenumbers number-lines
set-option -add global ui_options ncurses_assistant=off

# Windows
map global normal <c-n> ': x11-new<ret>'

# Commenting
define-command -hidden adrusi-comment-line %{
    try %{
        comment-line
    } catch %{
        try %{
            evaluate-commands -draft %{
                execute-keys <a-s>
                comment-block
            }
        } catch %{
            evaluate-commands -draft %{
                execute-keys xH
                comment-block
            }
        }
    }
}
map global user c %{: adrusi-comment-line<ret>}

# Wrapping
declare-option int wrapcol %opt{autowrap_column}

define-command highlight-wrapcol %{
    set-option window autowrap_column %opt{wrapcol}
    remove-highlighter window/wrapcol
    add-highlighter window/wrapcol column \
                    %sh{ echo $(( $kak_opt_wrapcol + 1 )) } \
                    LineNumberCursor
}
hook global WinCreate .* highlight-wrapcol
hook global WinSetOption wrapcol=.* highlight-wrapcol

declare-option bool autowrap false

hook global WinSetOption autowrap=true %{
    hook -group autowrap window InsertChar [^\n] %{ try %{
        execute-keys -draft "hGh<a-k>.{%opt{wrapcol},}<ret><a-;><a-b>i<ret><esc>"
    } }
}
hook global WinSetOption autowrap=false %{ try %{
    remove-hooks window autowrap
} }

define-command wrap %{
    evaluate-commands %sh{
        format_cmd="$(printf %s "${kak_opt_autowrap_fmtcmd}" \
            | sed 's/%c/${kak_opt_autowrap_column}/g')"
        printf %s "
            evaluate-commands -draft %{
                execute-keys <a-x><a-j> '| ${format_cmd}<ret>'
                try %{ execute-keys s\h+$<ret> d }
            }
            select '${kak_reg_m}'
        "
    }
}

map global user w :wrap<ret>

# soft-wrap by default because the line scrolling is usually just annoying
add-highlighter global/softwrap wrap -indent -marker "â¤·"

# Soft-tabs
declare-option bool soft_tabs true

hook global WinSetOption soft_tabs=true %{
    hook -group softtab window InsertChar \t %{ try %{
        execute-keys -draft h %opt{indentwidth}@
    } }

    hook -group softtab window InsertDelete ' ' %{ try %{
          execute-keys -draft 'h<a-h><a-k>\A\h+\z<ret>i<space><esc><lt>'
    } }
}

hook global WinSetOption soft_tabs=false %{
    remove-hooks window softtab
}

# Linting
define-command lint-on-save-enable %{
    hook -group lint-on-save buffer BufWritePost .* lint
}
define-command lint-on-save-disable %{
    remove-hooks buffer lint-on-save
}

# tab/shift-tab for navigating completions
hook global InsertCompletionShow .* %{ try %{
    execute-keys -draft hGh<a-K>\A\h+\z<ret>
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
} }
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

# Language-specific editing options
hook global BufCreate .*[.]sway %{
    set-option buffer filetype i3
}
hook global WinSetOption filetype=haskell %{
    set-option window indentwidth 2
}
hook global WinSetOption filetype=make %{
    set-option window soft_tabs false
}
hook global WinSetOption filetype=go %{
    set-option window soft_tabs false
    set-option window tabstop 4
}
hook global WinSetOption filetype=typescript %{
    set-option window wrapcol 100
}
hook global WinSetOption filetype=grep %{
    remove-highlighter global/softwrap
}

evaluate-commands %sh{
    for f in "$kak_config"/conf.d/*.kak; do
        printf 'source "%s"\n' "$f"
    done
}
